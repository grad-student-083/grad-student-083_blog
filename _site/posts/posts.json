[
  {
    "path": "posts/2021-09-25-RL-primer/",
    "title": "Reinforcement learning primer",
    "description": "A trivial attempt to unify the fundamental RL concepts in one place for building intuitions.",
    "author": [
      {
        "name": "Md Ferdous Alam",
        "url": "https://ferdous-alam.github.io"
      }
    ],
    "date": "2021-09-25",
    "categories": [],
    "contents": "\n\nContents\nIntroduction\nOnline sequential decision making\nBandit: A mandatory prior to RL\nMarkov Decision Process: The RL formalism\nDynamic programming\nReinforcement learning and optimal control\nBuilding algorithms for RL\nTypes of RL algorithms\nSample complexity of RL algorithms\nA case study\nConclusion\n\nIntroduction\nHere I will try to explain how RL stems from the sequential decision making framework and its close relation with optimal control theory. I will follow two primary references, reinforcement learning and optimal control (Bertsekas 2019) and introduction to reinforcement learning (Sutton and Barto 2018)\nOnline sequential decision making\nThe goal is to take sequential decisions “online” to achieve a certain goal; often times it is maximizing a performance objective which can be thougt of as a function \\(J(\\cdot)\\). The input to this objective function is not important right now. Let’s call this decision maker “agent”. The catch is that the agent has to figure out which decision to take based on the observed feedback from the envrionment of its interest. To observe a feedback the agent has to interact with the envrionment through some sort of actions. So, optimization will be at the core of this decision making procedure while we use data collected in an online fashion to identify actions to take. This is why the “learning” happens.\nBandit: A mandatory prior to RL\nConsider an online sequential decision making problem where an agent has \\(k\\) choices to choose an action and everytime it executes an action it receives a feedback from the environment. A fundamental question then aries for the agent: how to choose an action? The way it chooses an action describes its way of behaving in this particular environment which is known as the “policy” denoted as \\(\\pi\\). Note that \\(\\pi\\) decribes how to take an action but it does not say how to take the best action that will maximize the performance objective \\(J(\\cdot)\\). To identify the optimal action we need to find out the optimal policy \\(\\pi^*\\). So, the following makes sense \\[\\begin{equation}\n\\pi^* = \\text{argmax}_\\pi J^\\pi(\\cdot)\n\\end{equation}\\] where \\(J^\\pi(\\cdot)\\) is the value of the performance objective obtained using policy \\(\\pi\\). Note that the agent does not know the underlying distribution of the feedback from each action it takes. If it were known then the agent could easily pick the best action. This setting is known as the bandit problem or sometimes as “multi-armed bandit (MAB)” problem. Sometimes people call this “k-armed bandit” as well. Usually the feedback obtained from the environment is known as reward or cost.\nMarkov Decision Process: The RL formalism\nUntil now it is clear that we are interested in sequential decision making. To formalize such process we will adopt the `Markov Decision Process (MDP)’. An MDP \\(\\mathcal{M}\\) is usually expressed as a tuple of these following 5-elements. \\[\\mathcal{M} = \\langle \\mathcal{X}, \\mathcal{A}, \\mathcal{R}, \\mathcal{P}, \\gamma\\rangle\\] where,\n\\(\\mathcal{X}\\) is the state-space, a set of states, \\(\\mathbf{x}\\in\\mathcal{X}\\)\n\\(\\mathcal{A}\\) is the action-space, a set of actions, \\(a\\in\\mathcal{X}\\)\n\\(\\mathcal{R}\\) is the reward function, usually defined in the product space, \\(\\mathcal{R}:\\mathcal{X}\\times\\mathcal{A}\\rightarrow \\mathbb{R}\\)\n\\(\\mathcal{P}\\) is the transition probability function, also known as the dynamics of the system, that describes the conditional probability \\(p(\\mathbf{x}_{t+1}|\\mathbf{x}_t, a_t)\\)\n\\(\\gamma\\) is a discount factor, \\(\\gamma \\in [0, 1]\\)\nLet’s focus on how this formalism helps in sequential decision making. Assume that the agent is in a current state \\(\\mathbf{x}_t\\) at timestep \\(t\\). Based on some policy \\(\\pi\\) it takes a decision to move to state \\(\\mathbf{x}_{t+1}\\) by taking action \\(a_t\\). To move to that state, the agent needs to know the probability of moving to that state given the current state \\(\\mathbf{x}_t\\) and action \\(a_t\\). This is how the conditional probability comes into the process. Once the agent reaches state \\(\\mathbf{x}_{t+1}\\) it gets a feedback from the environment. This feedback is called a reward value, \\(R_t\\), which is usually a scalar numeric value. We assume that the reward value \\(R_t\\) comes as the output from the reward function \\(\\mathcal{R}\\) while it takes \\(\\mathbf{x}_t\\) and \\(a_t\\) as input, meaning \\(\\mathcal{R}(\\mathbf{x}_t, a_t): \\mathcal{X} \\times \\mathcal{A} \\rightarrow R_t\\). What if the reward function only depends on the current state and not the action? Then the reward function would be represented as \\(\\mathcal{R}(\\mathbf{x}_t): \\mathcal{X} \\rightarrow R_t\\). Similary if the reward depends on not only the current state and current action but also the state it ends up in, then we would use the description of the reward function as \\(\\mathcal{R}(\\mathbf{x}_t, a_t, \\mathbf{x}_{t+1}): \\mathcal{X} \\times \\mathcal{A} \\times \\mathcal{X} \\rightarrow R_t\\). Finally the agent uses a discount factor \\(\\gamma\\) to put less weight onto future rewards and more weight into recent rewards. This makes sense because the agent does not want to depend strongly on the information that comes after many timesteps into the future. All these information can be combined very convenienty in an MDP. Now it should be easier to follow why MDP is attractive for sequential decision making.\nThis formalism is great, but what is the goal of the agent in an MDP? In simplified terms the ‘goal’ of the agent is to maximize the accumulation of rewards. Let’s define the accumulation of rewards as return. The return obtained at timestep \\(t\\) can be expressed as \\(G_t^\\pi = R_t + R_{t+1} + R_{t+2} + \\dots\\). This means that if the agent moves to state \\(\\mathbf{x}_{t+1}\\) from state \\(\\mathbf{x}_t\\) by taking action \\(a_t\\) it receives reward \\(R_t\\) and at the next timestep if it follows the same policy it will receive reward \\(R_{t+1}\\) and so on. For an infinite horizon case, the return will blow up. This is why we use a discount factor \\(\\gamma\\) such that \\[ G_t = R_t + \\gamma R_{t+1} + \\gamma^2 R_{t+2} + \\dots = \\sum_{t=0}^{\\infty} \\gamma^k R_{t+k}.\\]\nThis discount factor serves two purposes: a) it provides more weight into recent rewards and b) it helps to keep the return as a finite value. If we do not use a discount factor in the MDP definition then those MDPs are called ‘undiscounted MDPs’.\nBut how do we maximize the return? The answer is pretty simple: by choosing the sequence of actions that provides the highest return. These actions are called ‘optimal actions’. Remember that actions are chosen according to a policy \\(\\pi:\\mathcal{X} \\rightarrow \\mathcal{A}\\). So to choose the optimal actions we need an optimal policy \\(\\pi^*\\). Now we have successfully identified the fundamental goal in this learning scheme: “how to obtian the optimal policy for sequential decision making?”\nTo identify whether a state is good or bad we need to assign some sort of value to that state. Usually this is known as the value function. The agent would like to explore states which have higher values compared to the rest. To derive the value of a state we use the reward function in an intuitive way. Let’s take a look. \\[V^\\pi(\\mathbf{x}) = \\mathbb{E}^\\pi[G_t|\\mathbf{x}] = \\mathbb{E}^\\pi \\left[R_{t} + \\gamma  R_{t+1} + \\dots |\\mathbf{x}\\right] = \\mathbb{E}^\\pi\\left[ \\sum_{k=0}^{\\infty} \\gamma^k R_{t+k} |\\mathbf{x}\\right]\\] Here we take the ‘expectation’ of the return to account for the stochasticity of the rewards. Notice that we are only taking into consideration the mean value of the return, not the variance. This sometimes cause a variance issue in developed algorithms based on this formalism. So, what does \\(V^\\pi(\\mathbf{x})\\) mean? This means that the value of a state while following a policy \\(\\pi\\) is the expected value of the return. Let’s develop a simple algorithm that can help us figure out the optimal policy \\(\\pi^*\\) using the value of the states.\nAlgorithm 1\n1 Find value of all states, \\(V^\\pi(\\mathbf{x})\\) where \\(\\mathbf{x}\\in\\mathcal{X}\\)\n2 From each state find the next best state \\(\\mathbf{x}_b = \\text{argmax}_{\\mathbf{x}'} V^\\pi(\\mathbf{x}')\\)\n3 Find the optimal policy by choosing the action that led to \\(\\mathbf{x}_b\\) meaning \\(\\pi^*(\\mathbf{x}) = \\{a: \\mathbf{x} \\rightarrow \\mathbf{x}_b\\}\\)\nWould not it be better if we could, rather than finding the value of a state, directly find the value of an action from a state? In that way we would be able to evaluate whether an action is good or bad based on the assigned value. Yes, we can and this is known as the action-value functions. These are also known as Q-values as they can be informally thought of as the quality of an action taken from a state. For convenience, an action taken from a state is combinedly referred as the state-action, \\((\\mathbf{x}, a)\\), pair. So, how do we define Q-values? Looking closely to the definition of the value-functions we can similarly define the Q-values by conditioning the return on the state-action pair.\n\\[Q^\\pi(\\mathbf{x}, a) = \\mathbb{E}^\\pi[G_t| \\mathbf{x}, a] = \\mathbb{E}^\\pi \\left[R_{t} + \\gamma  R_{t+1} + \\dots |\\mathbf{x}, a\\right] = \\mathbb{E}^\\pi\\left[ \\sum_{k=0}^{\\infty}\\gamma^k R_{t+k}|\\mathbf{x}, a\\right]\\] So, Q-values are the values assigned to the state-action pair and values are assigned to the states only. Can we derive any relationship between them based on their properties? To do that we need to break down their formal definition using the properties of the expectation operator in the above equations. Let’s break down the equation further using the definition of an expectation. We will use the following three properties of the expectation operator.\n\nExpectation of a random variable\n\\(p1\\): Remember that if \\(X\\) is a discrete random variable with finite number of outcomes \\(x_1, x_2, \\dots, x_k\\) with probabilities \\(p_1, p_2, \\dots, p_k\\) then \\[\\begin{equation} \\mathbb{E}[X] = p_1x_1 + p_2x_2 + \\dots + p_kx_k\\end{equation}\\]\n\\(p2\\): Expectations are linear operator, meaning \\[\\mathbb{E}[X_1] + \\mathbb{E}[X_2] = \\mathbb{E}[X_1 + X_2]\\]\n\\(p3\\): For conditional expectations using partition theorem, \\[\\mathbb{E}[X] = \\sum_y p(Y=y) \\mathbb{E}[X|Y=y]\\]\n\nSo, from the value function definition we get,\n\\[\\begin{aligned} V^\\pi(\\mathbf{x}) &= \\mathbb{E}^\\pi [R_t + \\gamma G_{t+1}|\\mathbf{x}] \\\\ \n&= \\sum_{a\\in\\mathcal{A}} \\pi(a|\\mathbf{x}) \\mathbb{E}[R_t + \\gamma G_{t+1}|\\mathbf{x}, a] \\ \\ \\ \\ \\text{ using } p3\\\\ \n&= \\sum_{a\\in\\mathcal{A}} \\pi(a|\\mathbf{x}) \\sum_{\\mathbf{x}'\\in\\mathcal{\\mathcal{X}}} p(\\mathbf{x}, a, \\mathbf{x}') \\mathbb{E}[R_t + \\gamma G_{t+1}|\\mathbf{x}, a, \\mathbf{x}'] \\ \\ \\ \\ \\text{ using } p3\\\\ \n&= \\sum_{a\\in\\mathcal{A}} \\pi(a|\\mathbf{x}) \\sum_{\\mathbf{x}'\\in\\mathcal{\\mathcal{X}}} p(\\mathbf{x}, a, \\mathbf{x}') \\left[\\underbrace{\\mathbb{E}[R_t]}_{r(\\mathbf{x}, a)} + \\mathbb{E}[\\gamma G_{t+1}|\\mathbf{x}, a, \\mathbf{x}'] \\right] \\ \\ \\ \\ \\text{ using } p2\\\\ \n&= \\sum_{a\\in\\mathcal{A}} \\pi(a|\\mathbf{x}) \\sum_{\\mathbf{x}'\\in\\mathcal{\\mathcal{X}}} p(\\mathbf{x}, a, \\mathbf{x}') \\left[ r(\\mathbf{x}, a) + \\gamma \\underbrace{\\mathbb{E}[G_{t+1}|\\mathbf{x}']}_{V^\\pi(\\mathbf{x}')} \\right] \\ \\ \\ \\ \\text{ using } p2\\\\ \n&= \\sum_{a\\in\\mathcal{A}} \\pi(a|\\mathbf{x}) \\sum_{\\mathbf{x}'\\in\\mathcal{\\mathcal{X}}} p(\\mathbf{x}, a, \\mathbf{x}') \\left[ r(\\mathbf{x}, a) + \\gamma V^\\pi(\\mathbf{x}') \\right]\n\\end{aligned}\\]\nThis gives us a recursive formula! Is there any way to determine the value of all the states within the state-space? Yes, these algorithms are known as dynamic programming algorithms.\nDynamic programming\nNote that all the future rewards in the return equation is unknown. If we knew about all the possible future rewards we are going to get from current timestep and forward, then we could obtain the exact value of the return. But unfortunately we do not have the luxury to know all these reward values apriori. This is where Reinforcement Learning (RL) comes into play.\nReinforcement learning and optimal control\nBuilding algorithms for RL\nTypes of RL algorithms\nSample complexity of RL algorithms\nA case study\nConclusion\n\n\n\nBertsekas, Dimitri. 2019. Reinforcement and Optimal Control. Athena Scientific.\n\n\nSutton, Richard S, and Andrew G Barto. 2018. Reinforcement Learning: An Introduction. MIT press.\n\n\n\n\n",
    "preview": {},
    "last_modified": "2021-10-08T03:43:48-04:00",
    "input_file": "RL-primer.utf8.md"
  },
  {
    "path": "posts/2021-04-19-rl-01-policy-gradient-methods/",
    "title": "RL 01: Policy gradient methods",
    "description": "Here we take a detailed view of policy gradient methods and their intuitions. This blog discuess how REINFORCE, baseline and actor-critic algorithms came into existence.",
    "author": [
      {
        "name": "Md Ferdous Alam",
        "url": "https://ferdous-alam.github.io"
      }
    ],
    "date": "2021-04-19",
    "categories": [],
    "contents": "\n\nContents\nIntroduction\nPolicy based RL vs value based RL\nPolicy gradient theorem\nREINFORCE algorithm\nUsing baseline\nActor-critic algorithms\nCase study\nSummary\n\nIntroduction\nWe closely follow chapter 13 of the classic textbook of Sutton and Barto (2nd edition) (Sutton and Barto 2018). Initially we visit the classic policy gradient theorem and later build on top of that to develop REINFORCE and actor-critic algorithms. As usual our goal is to develop better intuition on how and why these algorithms work.\nPolicy based RL vs value based RL\nPolicy gradient theorem\nREINFORCE algorithm\nUsing baseline\nActor-critic algorithms\nCase study\nSummary\n\n\n\nSutton, Richard S, and Andrew G Barto. 2018. Reinforcement Learning: An Introduction. MIT press.\n\n\n\n\n",
    "preview": {},
    "last_modified": "2021-09-25T03:44:28-04:00",
    "input_file": "rl-01-policy-gradient-methods.utf8.md"
  },
  {
    "path": "posts/2021-04-05-optimal-control-01-lqr/",
    "title": "Optimal Control 01: LQR",
    "description": "This post is part of a series of posts on optimal control theory. We take a detalied look on how classical LQR control is derived. A simple implementation is provided for clarity.",
    "author": [
      {
        "name": "Md Ferdous Alam",
        "url": "https://ferdous-alam.github.io"
      }
    ],
    "date": "2021-04-05",
    "categories": [],
    "contents": "\n\nContents\nIntroduction\nLinear system\n\nIntroduction\nLQR is an extremely popular optomal control framework. This blog closely follows (Duriez, Brunton, and Noack 2017).\nLinear system\nLet’s consider the linear system\n\\[\\begin{align} \n\\dot{\\mathbf{x}} &= \\mathbf{A}\\mathbf{x} + \\mathbf{B}\\mathbf{u}\\\\\n\\mathbf{y} &= \\mathbf{C}\\mathbf{x} + \\mathbf{D}\\mathbf{u}\\tag{1}\n\\end{align}\\]\nIf the system in (1) is controllable then a proportional controller can be designed as\n\\[\\begin{equation}\n\\mathbf{u} = -\\mathbf{K}_r \\mathbf{x}\\tag{2}\n\\end{equation}\\]\nHence the closed loop system becomes\n\\[\\begin{equation}\n\\dot{\\mathbf{x}} = (\\mathbf{A}-\\mathbf{B}\\mathbf{K}_r)\\mathbf{x}\\tag{3}\n\\end{equation}\\]\nWe can construct a quadratic cost \\(J\\) that balances the regulation of \\(\\mathbf{x}\\) with the cost of control input \\(\\mathbf{u}\\),\n\\[\\begin{equation}\nJ(t) = \\int_0^t [\\mathbf{x}^T(\\tau)\\mathbf{Q}\\mathbf{x}(\\tau)] + \\mathbf{u}^T(\\tau)\\mathbf{R}\\mathbf{u}(\\tau)]\\tag{4}\n\\end{equation}\\]\nBy solving Algebraic Riccati Equation (ARE) we get the optimal control law,\n\\[\\begin{equation}\n\\mathbf{K}_r = \\mathbf{R}^{-1}\\mathbf{B}^T\\mathbf{P}\\tag{5}\n\\end{equation}\\]\nwhere the ARE is expressed as\n\\[\\begin{equation}\n\\mathbf{A}^T\\mathbf{P} + \\mathbf{P}\\mathbf{A} - \\mathbf{P}\\mathbf{B}\\mathbf{R}^{-1}\\mathbf{B}^T\\mathbf{P} + \\mathbf{Q} = 0\\tag{6}\n\\end{equation}\\]\n\n\n\nDuriez, Thomas, Steven L Brunton, and Bernd R Noack. 2017. Machine Learning Control-Taming Nonlinear Dynamics and Turbulence. Springer.\n\n\n\n\n",
    "preview": {},
    "last_modified": "2021-04-05T04:44:24-04:00",
    "input_file": "optimal-control-01-lqr.utf8.md"
  },
  {
    "path": "posts/2021-03-29-deep-rl-01-dqn/",
    "title": "Deep RL 01: DQN",
    "description": "A short description of the post.",
    "author": [
      {
        "name": "Md Ferdous Alam",
        "url": "https://ferdous-alam.github.io"
      }
    ],
    "date": "2021-03-29",
    "categories": [],
    "contents": "\nThe graduate student perspective on DQN.\nDistill is a publication format for scientific and technical writing, native to the web.\nLearn more about using Distill at https://rstudio.github.io/distill.\n\n\n\n",
    "preview": {},
    "last_modified": "2021-04-05T02:47:49-04:00",
    "input_file": "deep-rl-01-dqn.utf8.md"
  },
  {
    "path": "posts/welcome/",
    "title": "Welcome to The Graduate Student Perspective",
    "description": {},
    "author": [
      {
        "name": "Md Ferdous Alam",
        "url": "https://ferdous-alam.github.io"
      }
    ],
    "date": "2021-03-29",
    "categories": [],
    "contents": "\nWhy graduate student perspective?\nMachine learning, Reinforcement learning and control theory are vast! The stream of research articles are often overwhelming. Sometimes I like to take a step back and surprisingly I find peace exploring fundamental topics and explaining them. I remeber there was a time when I wanted a blog that explains complex topics in intuitive ways. Now-a-days the chaotic stream of online blogs have made it extremely difficult for me to find a reliable blog post quickly. I personally enjoy a nice balance between formal presentation of concepts (because they are robust!) followed by an interesting toy example for building intuitions. I like to call this approach Intuitive formalism or often during my PhD research presentations I use the term visual formalism. Unfortunately I can not find a lot of online blog posts/writings according to my taste. So I decided to make a blog for myself that gave birth to this site. In the unlikely case of you reading this I appreciate your time here. Cheers! :)\n\n\n\n",
    "preview": {},
    "last_modified": "2021-10-08T13:34:35-04:00",
    "input_file": "welcome.utf8.md"
  }
]
